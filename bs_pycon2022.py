# -*- coding: utf-8 -*-
"""bs_pycon2022.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cFGeHGuqV13E4smfDKlezEkJ7eHr57rl

# Project: Breast Cancer Classification Model


### by Redeemer Salami Okekale

## Table of Contents
- [Introduction](#intro)
- [Exploratory Data Analysis & Cleaning - EDA](#wrangling)
- [Model Selection & Model Training](#model_selection_training)
- [Saving the model](#model_saving)
- [Summary](#summary)

<a id='intro'></a>
## Introduction
> This document explains the fundamental steps in developing a classification machine learning model.

<a id='wrangling'></a>
## Exploratory Data Analysis and Cleaning
> This stage involves importing libraries that will assist us in analyzing and exploring our data to determine what operations we need to perform in order to make it clean and organized.
"""

#install pycaret
!pip install pycaret shap

# Commented out IPython magic to ensure Python compatibility.
#import all relevant packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
#import shap
# %matplotlib inline

# read data_set and make copy to save it 
df_r = pd.read_csv("/content/drive/MyDrive/PyCon2022 (1)/breast_cancer_data.csv")
df = df_r.copy()

from google.colab import drive
drive.mount('/content/drive')

df.sample(10)

# showing important information 
df.info()

#getting some additional description for stats figures
df.describe()

# find duplicates
df.duplicated().sum()
# No duplicates here

# What about NaN values?
df.isnull().sum()

df.drop(['id'], axis=1, inplace=True)

df['diagnosis'].value_counts()

df = (df.groupby('diagnosis', as_index=False)
        .apply(lambda x: x.sample(n=212))
        .reset_index(drop=True))

"""<a id='model_selection_training'></a>
## Model Selection & Training
> Now that we have a data well prepared we are ready to select and train the right model for the task.

"""

#import package that matches the problem
from pycaret.classification import *

#Set the target/goal
s = setup(df, target = 'diagnosis')

#compare models; takes a moment
best_model = compare_models()

evaluate_model(best_model)

predictions = predict_model(best_model)

predictions

save_model(best_model, 'breast_cancer_model')